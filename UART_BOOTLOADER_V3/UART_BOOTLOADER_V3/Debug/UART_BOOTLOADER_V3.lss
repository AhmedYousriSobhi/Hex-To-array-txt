
UART_BOOTLOADER_V3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00003800  00003800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  00003b20  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000183  0080023e  0080023e  00000592  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db6  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084b  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063c  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f5  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c3  00000000  00000000  00002981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003800 <__vectors>:
    3800:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__ctors_end>
    3804:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3808:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    380c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3810:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3814:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3818:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    381c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3820:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3824:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3828:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    382c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3830:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3834:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3838:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    383c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3840:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3844:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3848:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    384c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>
    3850:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__bad_interrupt>

00003854 <__ctors_end>:
    3854:	11 24       	eor	r1, r1
    3856:	1f be       	out	0x3f, r1	; 63
    3858:	cf e5       	ldi	r28, 0x5F	; 95
    385a:	d4 e0       	ldi	r29, 0x04	; 4
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	cd bf       	out	0x3d, r28	; 61

00003860 <__do_copy_data>:
    3860:	12 e0       	ldi	r17, 0x02	; 2
    3862:	a0 e6       	ldi	r26, 0x60	; 96
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	e0 e2       	ldi	r30, 0x20	; 32
    3868:	fb e3       	ldi	r31, 0x3B	; 59
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <__do_copy_data+0x10>
    386c:	05 90       	lpm	r0, Z+
    386e:	0d 92       	st	X+, r0
    3870:	ae 33       	cpi	r26, 0x3E	; 62
    3872:	b1 07       	cpc	r27, r17
    3874:	d9 f7       	brne	.-10     	; 0x386c <__do_copy_data+0xc>

00003876 <__do_clear_bss>:
    3876:	23 e0       	ldi	r18, 0x03	; 3
    3878:	ae e3       	ldi	r26, 0x3E	; 62
    387a:	b2 e0       	ldi	r27, 0x02	; 2
    387c:	01 c0       	rjmp	.+2      	; 0x3880 <.do_clear_bss_start>

0000387e <.do_clear_bss_loop>:
    387e:	1d 92       	st	X+, r1

00003880 <.do_clear_bss_start>:
    3880:	a1 3c       	cpi	r26, 0xC1	; 193
    3882:	b2 07       	cpc	r27, r18
    3884:	e1 f7       	brne	.-8      	; 0x387e <.do_clear_bss_loop>
    3886:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <main>
    388a:	0c 94 8e 1d 	jmp	0x3b1c	; 0x3b1c <_exit>

0000388e <__bad_interrupt>:
    388e:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__vectors>

00003892 <HAL_FLASH_SPM>:
	//SREG = sreg;                         // Restore Status Register.
}

void BOOT_CLEAR_TEMP_BUFFER(uint16_t address)
{
	SPMCR_REG |= _BV(RWWSRE);
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	00 d0       	rcall	.+0      	; 0x3898 <HAL_FLASH_SPM+0x6>
    3898:	00 d0       	rcall	.+0      	; 0x389a <HAL_FLASH_SPM+0x8>
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7fc000>
    38a2:	30 91 01 00 	lds	r19, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7fc001>
    38a6:	3c 83       	std	Y+4, r19	; 0x04
    38a8:	2b 83       	std	Y+3, r18	; 0x03
    38aa:	70 93 01 00 	sts	0x0001, r23	; 0x800001 <__TEXT_REGION_LENGTH__+0x7fc001>
    38ae:	60 93 00 00 	sts	0x0000, r22	; 0x800000 <__TEXT_REGION_LENGTH__+0x7fc000>
    38b2:	20 91 1e 00 	lds	r18, 0x001E	; 0x80001e <__TEXT_REGION_LENGTH__+0x7fc01e>
    38b6:	30 91 1f 00 	lds	r19, 0x001F	; 0x80001f <__TEXT_REGION_LENGTH__+0x7fc01f>
    38ba:	3a 83       	std	Y+2, r19	; 0x02
    38bc:	29 83       	std	Y+1, r18	; 0x01
    38be:	90 93 1f 00 	sts	0x001F, r25	; 0x80001f <__TEXT_REGION_LENGTH__+0x7fc01f>
    38c2:	80 93 1e 00 	sts	0x001E, r24	; 0x80001e <__TEXT_REGION_LENGTH__+0x7fc01e>
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	58 bf       	out	0x38, r21	; 56
    38ca:	47 bf       	out	0x37, r20	; 55
    38cc:	e8 95       	spm
    38ce:	87 b7       	in	r24, 0x37	; 55
    38d0:	98 b7       	in	r25, 0x38	; 56
    38d2:	80 fd       	sbrc	r24, 0
    38d4:	fc cf       	rjmp	.-8      	; 0x38ce <HAL_FLASH_SPM+0x3c>
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	9a 81       	ldd	r25, Y+2	; 0x02
    38da:	90 93 1f 00 	sts	0x001F, r25	; 0x80001f <__TEXT_REGION_LENGTH__+0x7fc01f>
    38de:	80 93 1e 00 	sts	0x001E, r24	; 0x80001e <__TEXT_REGION_LENGTH__+0x7fc01e>
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	90 93 01 00 	sts	0x0001, r25	; 0x800001 <__TEXT_REGION_LENGTH__+0x7fc001>
    38ea:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7fc000>
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	08 95       	ret

000038fc <BOOT_PAGE_ERASE>:
    38fc:	43 e0       	ldi	r20, 0x03	; 3
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	80 78       	andi	r24, 0x80	; 128
    3904:	9f 73       	andi	r25, 0x3F	; 63
    3906:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <HAL_FLASH_SPM>

0000390a <BOOT_PAGE_FILL>:
    390a:	41 e0       	ldi	r20, 0x01	; 1
    390c:	8e 77       	andi	r24, 0x7E	; 126
    390e:	99 27       	eor	r25, r25
    3910:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <HAL_FLASH_SPM>

00003914 <BOOT_PAGE_WRITE>:
    3914:	45 e0       	ldi	r20, 0x05	; 5
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	70 e0       	ldi	r23, 0x00	; 0
    391a:	80 78       	andi	r24, 0x80	; 128
    391c:	9f 73       	andi	r25, 0x3F	; 63
    391e:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <HAL_FLASH_SPM>

00003922 <BOOT_RWW_ENABLE>:
}

void BOOT_RWW_ENABLE(void)
{
	SPMCR_REG |= _BOOT_RWW_ENABLE_CMD;
    3922:	87 b7       	in	r24, 0x37	; 55
    3924:	98 b7       	in	r25, 0x38	; 56
    3926:	81 61       	ori	r24, 0x11	; 17
    3928:	98 bf       	out	0x38, r25	; 56
    392a:	87 bf       	out	0x37, r24	; 55
	asm volatile("spm");                  // Execute SPM Instruction.
    392c:	e8 95       	spm
    392e:	08 95       	ret

00003930 <boot_program_page>:
*/
#define BLD_ACK 'A'
uint16_t volatile code_size = 0;
uint8_t volatile num_of_pages = 0;
void boot_program_page (uint32_t page, uint8_t *buf)
{
    3930:	8f 92       	push	r8
    3932:	9f 92       	push	r9
    3934:	af 92       	push	r10
    3936:	bf 92       	push	r11
    3938:	ef 92       	push	r14
    393a:	ff 92       	push	r15
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	ea 01       	movw	r28, r20
	//cli();
	address = page*SPM_PAGESIZE;
	
	//eeprom_busy_wait (); // as we use safe in erase and fill.

	BOOT_PAGE_ERASE (address);
    3946:	4b 01       	movw	r8, r22
    3948:	5c 01       	movw	r10, r24
    394a:	47 e0       	ldi	r20, 0x07	; 7
    394c:	88 0c       	add	r8, r8
    394e:	99 1c       	adc	r9, r9
    3950:	aa 1c       	adc	r10, r10
    3952:	bb 1c       	adc	r11, r11
    3954:	4a 95       	dec	r20
    3956:	d1 f7       	brne	.-12     	; 0x394c <boot_program_page+0x1c>
    3958:	84 01       	movw	r16, r8
    395a:	c4 01       	movw	r24, r8
    395c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <BOOT_PAGE_ERASE>
    3960:	7e 01       	movw	r14, r28
    3962:	80 e8       	ldi	r24, 0x80	; 128
    3964:	e8 0e       	add	r14, r24
    3966:	f1 1c       	adc	r15, r1
		// Set up little-endian word.

		uint16_t w = *buf++;
		w += (*buf++) << 8;
		
		BOOT_PAGE_FILL (address + i, w);
    3968:	0c 1b       	sub	r16, r28
    396a:	1d 0b       	sbc	r17, r29

	for (i=0; i<SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.

		uint16_t w = *buf++;
    396c:	28 81       	ld	r18, Y
		w += (*buf++) << 8;
		
		BOOT_PAGE_FILL (address + i, w);
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	98 2f       	mov	r25, r24
    3974:	88 27       	eor	r24, r24
    3976:	bc 01       	movw	r22, r24
    3978:	62 0f       	add	r22, r18
    397a:	71 1d       	adc	r23, r1
    397c:	c8 01       	movw	r24, r16
    397e:	8c 0f       	add	r24, r28
    3980:	9d 1f       	adc	r25, r29
    3982:	0e 94 85 1c 	call	0x390a	; 0x390a <BOOT_PAGE_FILL>
    3986:	22 96       	adiw	r28, 0x02	; 2

	BOOT_PAGE_ERASE (address);
	
	//boot_spm_busy_wait ();      // Wait until the memory is erased.

	for (i=0; i<SPM_PAGESIZE; i+=2)
    3988:	ce 15       	cp	r28, r14
    398a:	df 05       	cpc	r29, r15
    398c:	79 f7       	brne	.-34     	; 0x396c <boot_program_page+0x3c>
		w += (*buf++) << 8;
		
		BOOT_PAGE_FILL (address + i, w);
	}

	BOOT_PAGE_WRITE (address);     // Store buffer in flash page.
    398e:	c4 01       	movw	r24, r8
    3990:	0e 94 8a 1c 	call	0x3914	; 0x3914 <BOOT_PAGE_WRITE>
	BOOT_RWW_ENABLE ();

	// Re-enable interrupts (if they were ever enabled).

	//SREG = sreg;
}
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	1f 91       	pop	r17
    399a:	0f 91       	pop	r16
    399c:	ff 90       	pop	r15
    399e:	ef 90       	pop	r14
    39a0:	bf 90       	pop	r11
    39a2:	af 90       	pop	r10
    39a4:	9f 90       	pop	r9
    39a6:	8f 90       	pop	r8
	//boot_spm_busy_wait();       // Wait until the memory is written.

	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.

	BOOT_RWW_ENABLE ();
    39a8:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <BOOT_RWW_ENABLE>

000039ac <boot_uploade_app_code>:
	// Re-enable interrupts (if they were ever enabled).

	//SREG = sreg;
}
void boot_uploade_app_code(void)
{
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
	//Future: add timeout for error checking return from function.
	uint16_t i;
	//uint8_t percestage =0;
	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: SENDING ACK\n");
    39b0:	80 e6       	ldi	r24, 0x60	; 96
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
	USART_Transmit(BLD_ACK);
    39b8:	81 e4       	ldi	r24, 0x41	; 65
    39ba:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <USART_Transmit>
	USART_Transmit('\n');
    39be:	8a e0       	ldi	r24, 0x0A	; 10
    39c0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <USART_Transmit>
	num_of_pages = USART_Receive();
    39c4:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <USART_Receive>
    39c8:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
	num_of_pages = num_of_pages - 48;
    39cc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
    39d0:	80 53       	subi	r24, 0x30	; 48
    39d2:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
	code_size = (num_of_pages)*(uint8_t)128;
    39d6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
    39da:	20 e8       	ldi	r18, 0x80	; 128
    39dc:	82 9f       	mul	r24, r18
    39de:	c0 01       	movw	r24, r0
    39e0:	11 24       	eor	r1, r1
    39e2:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <code_size+0x1>
    39e6:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <code_size>
	for(i=0; i<code_size;i++) 
    39ea:	c0 e0       	ldi	r28, 0x00	; 0
    39ec:	d0 e0       	ldi	r29, 0x00	; 0
    39ee:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <code_size>
    39f2:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <code_size+0x1>
    39f6:	c8 17       	cp	r28, r24
    39f8:	d9 07       	cpc	r29, r25
    39fa:	40 f4       	brcc	.+16     	; 0x3a0c <boot_uploade_app_code+0x60>
	{
		App_Code[i] = USART_Receive();
    39fc:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <USART_Receive>
    3a00:	fe 01       	movw	r30, r28
    3a02:	ef 5b       	subi	r30, 0xBF	; 191
    3a04:	fd 4f       	sbci	r31, 0xFD	; 253
    3a06:	80 83       	st	Z, r24
	USART_Transmit(BLD_ACK);
	USART_Transmit('\n');
	num_of_pages = USART_Receive();
	num_of_pages = num_of_pages - 48;
	code_size = (num_of_pages)*(uint8_t)128;
	for(i=0; i<code_size;i++) 
    3a08:	21 96       	adiw	r28, 0x01	; 1
    3a0a:	f1 cf       	rjmp	.-30     	; 0x39ee <boot_uploade_app_code+0x42>
		percestage%=10;
		USART_Transmit( percestage +48);
		USART_Transmit_Msg((uint8_t *)"%\n");
		*/
	}	
}
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	08 95       	ret

00003a12 <main>:
int main(void)
{
	uint8_t pageNo;
	unsigned char tempBuffer = 0;
	USART_Init(12); // setting baudrate to 4800 : 12, 2400 : 25 || 9600 : 103 for 16MHZ
    3a12:	8c e0       	ldi	r24, 0x0C	; 12
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <USART_Init>
	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: HELLO FROM BOOTLOADER\n");
    3a1a:	88 e7       	ldi	r24, 0x78	; 120
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: WAITING FOR CMD\n");
    3a22:	8a e9       	ldi	r24, 0x9A	; 154
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
	while(1)
	{
		
		tempBuffer = USART_Receive();
    3a2a:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <USART_Receive>
    3a2e:	c8 2f       	mov	r28, r24
		USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: CMD RECIEVED IS\n ");
    3a30:	86 eb       	ldi	r24, 0xB6	; 182
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
		USART_Transmit(tempBuffer);
    3a38:	8c 2f       	mov	r24, r28
    3a3a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <USART_Transmit>
		USART_Transmit(0x06);
    3a3e:	86 e0       	ldi	r24, 0x06	; 6
    3a40:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <USART_Transmit>
		USART_Transmit_Msg((uint8_t *)"\n");
    3a44:	83 ef       	ldi	r24, 0xF3	; 243
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>

		switch (tempBuffer)
    3a4c:	c6 34       	cpi	r28, 0x46	; 70
    3a4e:	f9 f0       	breq	.+62     	; 0x3a8e <main+0x7c>
    3a50:	88 f4       	brcc	.+34     	; 0x3a74 <main+0x62>
    3a52:	c1 34       	cpi	r28, 0x41	; 65
    3a54:	e9 f5       	brne	.+122    	; 0x3ad0 <main+0xbe>
		{
			case 'A':   USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: SENDING COMMAND LIST:\n");
    3a56:	83 ed       	ldi	r24, 0xD3	; 211
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						USART_Transmit_Msg((uint8_t *)"\t F : TO FLASH\n");
    3a5e:	85 ef       	ldi	r24, 0xF5	; 245
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						USART_Transmit_Msg((uint8_t *)"\t U : TO UPLOADE NEW APPLICATION HEX ARRAY\n");
    3a66:	85 e0       	ldi	r24, 0x05	; 5
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						USART_Transmit_Msg((uint8_t *)"\t A : TO SEND CMD LIST\n");
    3a6e:	81 e3       	ldi	r24, 0x31	; 49
    3a70:	91 e0       	ldi	r25, 0x01	; 1
    3a72:	d9 cf       	rjmp	.-78     	; 0x3a26 <main+0x14>
		USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: CMD RECIEVED IS\n ");
		USART_Transmit(tempBuffer);
		USART_Transmit(0x06);
		USART_Transmit_Msg((uint8_t *)"\n");

		switch (tempBuffer)
    3a74:	c2 35       	cpi	r28, 0x52	; 82
    3a76:	29 f1       	breq	.+74     	; 0x3ac2 <main+0xb0>
    3a78:	c5 35       	cpi	r28, 0x55	; 85
    3a7a:	51 f5       	brne	.+84     	; 0x3ad0 <main+0xbe>
						USART_Transmit_Msg((uint8_t *)"\t F : TO FLASH\n");
						USART_Transmit_Msg((uint8_t *)"\t U : TO UPLOADE NEW APPLICATION HEX ARRAY\n");
						USART_Transmit_Msg((uint8_t *)"\t A : TO SEND CMD LIST\n");
						break;
			
			case 'U':	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: UPLOADING APPLICATION CODE BYTES CMD RECIEVED\n");
    3a7c:	89 e4       	ldi	r24, 0x49	; 73
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						boot_uploade_app_code();
    3a84:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <boot_uploade_app_code>
						//if(check != 0) USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: CODE UPLOADING ERROR\n");
						USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: CODE UPLOADING COMPLETED\n");
    3a88:	83 e8       	ldi	r24, 0x83	; 131
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	cc cf       	rjmp	.-104    	; 0x3a26 <main+0x14>
						//USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: CODE PAGES = \n");
						//USART_Transmit(num_of_pages+48);	
						break;
						
			
			case 'F':	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: START FLASHING\n");
    3a8e:	88 ea       	ldi	r24, 0xA8	; 168
    3a90:	91 e0       	ldi	r25, 0x01	; 1
    3a92:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						//start at flash_start = 0x0000
						for(pageNo = 0 ; pageNo < (num_of_pages) ; pageNo++)
    3a96:	c0 e0       	ldi	r28, 0x00	; 0
    3a98:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
    3a9c:	c8 17       	cp	r28, r24
    3a9e:	70 f4       	brcc	.+28     	; 0x3abc <main+0xaa>
						{
							boot_program_page( pageNo, &App_Code[SPM_PAGESIZE*pageNo]);
    3aa0:	80 e8       	ldi	r24, 0x80	; 128
    3aa2:	c8 9f       	mul	r28, r24
    3aa4:	a0 01       	movw	r20, r0
    3aa6:	11 24       	eor	r1, r1
    3aa8:	4f 5b       	subi	r20, 0xBF	; 191
    3aaa:	5d 4f       	sbci	r21, 0xFD	; 253
    3aac:	6c 2f       	mov	r22, r28
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 98 1c 	call	0x3930	; 0x3930 <boot_program_page>
						break;
						
			
			case 'F':	USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: START FLASHING\n");
						//start at flash_start = 0x0000
						for(pageNo = 0 ; pageNo < (num_of_pages) ; pageNo++)
    3ab8:	cf 5f       	subi	r28, 0xFF	; 255
    3aba:	ee cf       	rjmp	.-36     	; 0x3a98 <main+0x86>
						{
							boot_program_page( pageNo, &App_Code[SPM_PAGESIZE*pageNo]);
						}
						USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: FLASHING IS FINISHED\n");
    3abc:	83 ec       	ldi	r24, 0xC3	; 195
    3abe:	91 e0       	ldi	r25, 0x01	; 1
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <main+0xb4>
						//start the actual program
						asm("jmp 0");
						break;
			
			case 'R':   USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: JUMPING TO APPLICATION CODE");
    3ac2:	84 ee       	ldi	r24, 0xE4	; 228
    3ac4:	91 e0       	ldi	r25, 0x01	; 1
    3ac6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <USART_Transmit_Msg>
						asm("jmp 0");
    3aca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
						break;			
    3ace:	ad cf       	rjmp	.-166    	; 0x3a2a <main+0x18>
			
			default:    USART_Transmit_Msg((uint8_t *)"BLD_DEBUG: UNDEFINED CMD, TO GET CMD LIST SEND A\n");			
    3ad0:	8b e0       	ldi	r24, 0x0B	; 11
    3ad2:	92 e0       	ldi	r25, 0x02	; 2
    3ad4:	a8 cf       	rjmp	.-176    	; 0x3a26 <main+0x14>

00003ad6 <USART_Init>:
#include "MCAL_ATMEGA_USART.h"

void USART_Init( uint16_t baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    3ad6:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
    3ad8:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    3ada:	88 e1       	ldi	r24, 0x18	; 24
    3adc:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
    3ade:	86 e8       	ldi	r24, 0x86	; 134
    3ae0:	80 bd       	out	0x20, r24	; 32
    3ae2:	08 95       	ret

00003ae4 <USART_Transmit>:
}

void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
    3ae4:	5d 9b       	sbis	0x0b, 5	; 11
    3ae6:	fe cf       	rjmp	.-4      	; 0x3ae4 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
    3ae8:	8c b9       	out	0x0c, r24	; 12
    3aea:	08 95       	ret

00003aec <USART_Transmit_Msg>:
}

void USART_Transmit_Msg(uint8_t *word )
{
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	cf 93       	push	r28
    3af2:	8c 01       	movw	r16, r24
	uint8_t index = 0;
    3af4:	c0 e0       	ldi	r28, 0x00	; 0
	while(word[index] != '\n')
    3af6:	f8 01       	movw	r30, r16
    3af8:	ec 0f       	add	r30, r28
    3afa:	f1 1d       	adc	r31, r1
    3afc:	80 81       	ld	r24, Z
    3afe:	8a 30       	cpi	r24, 0x0A	; 10
    3b00:	21 f0       	breq	.+8      	; 0x3b0a <USART_Transmit_Msg+0x1e>
	{
		USART_Transmit(word[index++]);
    3b02:	cf 5f       	subi	r28, 0xFF	; 255
    3b04:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <USART_Transmit>
    3b08:	f6 cf       	rjmp	.-20     	; 0x3af6 <USART_Transmit_Msg+0xa>
	}
	USART_Transmit('\n');
	
}
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
	uint8_t index = 0;
	while(word[index] != '\n')
	{
		USART_Transmit(word[index++]);
	}
	USART_Transmit('\n');
    3b10:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <USART_Transmit>

00003b14 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
    3b14:	5f 9b       	sbis	0x0b, 7	; 11
    3b16:	fe cf       	rjmp	.-4      	; 0x3b14 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
    3b18:	8c b1       	in	r24, 0x0c	; 12
}
    3b1a:	08 95       	ret

00003b1c <_exit>:
    3b1c:	f8 94       	cli

00003b1e <__stop_program>:
    3b1e:	ff cf       	rjmp	.-2      	; 0x3b1e <__stop_program>
